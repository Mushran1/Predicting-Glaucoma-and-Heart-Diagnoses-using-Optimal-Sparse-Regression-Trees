# read the dataset
import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from math import sqrt
from sklearn.model_selection import KFold

# Read the dataset
df = pd.read_csv("heart_binarized.csv")
X, y = df.iloc[:, :-1].values, df.iloc[:, -1].values
h = df.columns[:-1]
X = pd.DataFrame(X, columns=h)

# Define the number of splits for KFold
n_splits = 5
kf = KFold(n_splits=n_splits, shuffle=True, random_state=42)

# Initialize dictionary to store the results
results = {}

# Test with different depth limits
for depth_limit in [2, 3, 4, 5]:
    # Initialize lists to store the results for the current depth
    mse_scores = []
    rmse_scores = []
    num_leaves_list = []
    r2_scores = []

    # Perform k-fold cross-validation
    for train_index, test_index in kf.split(X):
        # Split the data
        X_train_kf, X_test_kf = X.iloc[train_index], X.iloc[test_index]
        y_train_kf, y_test_kf = y[train_index], y[test_index]

        # Initialize the RandomForestClassifier with current depth_limit
        rf_clf = RandomForestRegressor(max_depth=depth_limit, random_state=42)
        rf_clf.fit(X_train_kf, y_train_kf)

        # Predict on the test set
        y_pred_kf = rf_clf.predict(X_test_kf)

        # Calculate the number of leaves
        num_leaves = sum(tree.tree_.n_leaves for tree in rf_clf.estimators_)
        num_leaves_list.append(num_leaves)

        # Calculate MSE and RMSE
        mse = mean_squared_error(y_test_kf, y_pred_kf)
        r2 = r2_score(y_test_kf, y_pred_kf)
        rmse = sqrt(mse)
        mse_scores.append(mse)
        rmse_scores.append(rmse)
        r2_scores.append(r2)

    # Calculate the average MSE, RMSE, and number of leaves for the current depth
    avg_mse = np.mean(mse_scores)
    avg_rmse = np.mean(rmse_scores)
    avg_num_leaves = np.mean(num_leaves_list)
    avg_r2 = np.mean(r2_scores)

    # Store the results
    results[depth_limit] = {
        "Average MSE": avg_mse,
        "Average RMSE": avg_rmse,
        "Average number of leaves": avg_num_leaves,
        "Average R2": avg_r2
    }

# Find the best depth based on Average MSE
best_depth = min(results, key=lambda x: results[x]["Average MSE"])

# Print the results
for depth_limit, metrics in results.items():
    print(f"Depth: {depth_limit}")
    for metric_name, metric_value in metrics.items():
        print(f"{metric_name}: {metric_value}")
    print()

print(f"Best depth based on Average MSE: {best_depth}")
print(f"Results for the best depth:")
for metric_name, metric_value in results[best_depth].items():
    print(f"{metric_name}: {metric_value}")
